#!/usr/bin/env bash
export VWC_EXECUTIONPLANE_BASEPATH=$PATH

export PATH="/vcw/bin:/vcw/bin/bash:/vcw/bin/bash/executionplane:${VWC_EXECUTIONPLANE_BASEPATH}"
export VWC_EXECUTIONPLANE_ORIGINALPATH=$PATH

export PATH="/vcw/bin/bash/wrapper:${VWC_EXECUTIONPLANE_ORIGINALPATH}"
export VWC_EXECUTIONPLANE_WRAPPERPATH=$PATH

# set VWC_HOSTNAME
if [[ -f /hostfs/etc/hostname ]]; then
  export VWC_HOSTNAME="$(< /hostfs/etc/hostname)"
elif [[ -d /hostfs/etc ]]; then
  export VWC_HOSTNAME="host.docker.internal"
fi
if [[ "$VWC_HOSTNAME" == "" ]]; then
  export VWC_HOSTNAME="localhost"
fi

if [[ $VWC_PREENTRYPOINT != "" ]] ; then
  . "$VWC_PREENTRYPOINT"
fi

# Register APIs
for f in /vcw/bin/${VWC_IMAGE}/* ;
do
	folder=$(basename $f)
	if [[ -d $f && "$folder" != "internal" && "$folder" != "bash" ]] ; then
    envName="VWC_EXECUTIONPLANE_APIEXTERNALPATH_${folder^^}"
    export "$envName"="/vcw/bin/${VWC_IMAGE}/$folder:${VWC_EXECUTIONPLANE_ORIGINALPATH}"
    envName="VWC_EXECUTIONPLANE_APIINTERNALPATH_${folder^^}"
    export "$envName"="/vcw/bin/${VWC_IMAGE}/$folder:/vcw/bin/${VWC_IMAGE}/$folder/internal:/vcw/bin/${VWC_IMAGE}/internal:$VWC_EXECUTIONPLANE_ORIGINALPATH"
	fi
done;

export VWC_EXECUTIONPLANE="${VWC_IMAGENAME}"

if [[ $1 == '--executiontag' ]] ; then
  export VWC_EXECUTIONTAG=$2
  shift
  shift
fi

if [[ $1 == "--keepalive"* ]] ; then
  cycles=$(echo "$1" | cut -d':' -f 2 | cut -d' ' -f 1)
  export VWC_EXITPOINT="KEEPALIVE:$cycles"
  shift
elif [[ $1 == '--nokeepalive' ]] ; then
  export VWC_EXITPOINT=
  shift
fi

export PS1='$(pwd)# '
start=$SECONDS

# image-wrapper status information
timestamp=$(to-timestamp)
printf '{ "source":"wrapper", "@timestamp":"%s", "status":"initialising", "entrypoint": "/vcw/bin/bash/wrapper/run-image %s "}\n' "$timestamp" "'$*'"

# invoke entrypoint if no arguments
(
export PATH=$VWC_EXECUTIONPLANE_BASEPATH
$VWC_ENTRYPOINT "$@"
)

# emit log and image wrapper info upon termination
if [[ "$VWC_EXITPOINT" == "KEEPALIVE"* ]] ; then
  cycles=$(echo "$VWC_EXITPOINT" | cut -d':' -f 2)
  let "iterations = 0$cycles"
	timestamp=$(to-timestamp)
	duration=$(( SECONDS - start))
	start=$SECONDS
  continue="true"
	while [[ "true" == "$continue" ]] ;
	do
		keepalive=$(( SECONDS - start))
    printf '{ "source":"wrapper", "@timestamp":"%s", "status":"exiting", "uptime-seconds":"%s", "keepalive-seconds":"%s"}\n' "$timestamp" "$duration" "$keepalive"
		sleep 5
    let "iterations = iterations - 1"
    if (( iterations == 0 )) ; then
      continue="false"
    fi
	done
else
	timestamp=$(to-timestamp)
	duration=$(( SECONDS - start))
  printf '{ "source":"wrapper", "@timestamp":"%s", "status":"exiting", "uptime-seconds":"%s"}\n' "$timestamp" "$duration"
	sleep 0.25
fi
